
function filename=jobs_Lonestar(core,TaskNum,RunTime,TaskPerNode)
if nargin<3
    RunTime=24;
end
if nargin<4
    TaskPerNode=12;
end
filename=[core,'.LoneStar'];
fid = fopen(filename,'W');
fprintf(fid,'#!/bin/bash\n');
fprintf(fid,'#\n');
fprintf(fid,'# Simple SLURM script for submitting multiple serial\n');
fprintf(fid,'# jobs (e.g. parametric studies) using a script wrapper\n');
fprintf(fid,'# to launch the jobs.\n');
fprintf(fid,'#\n');
fprintf(fid,'# To use, build the launcher executable and your\n');
fprintf(fid,'# serial application(s) and place them in your WORKDIR\n');
fprintf(fid,'# directory.  Then, edit the CONTROL_FILE to specify\n');
fprintf(fid,'# each executable per process.\n');
fprintf(fid,'#-------------------------------------------------------\n');
fprintf(fid,'#-------------------------------------------------------\n');
fprintf(fid,'#\n'); 
fprintf(fid,'#         <------ Setup Parameters ------>\n');
fprintf(fid,'#\n');
fprintf(fid,'#!/bin/csh\n');
fprintf(fid,'#$ -N %s\n',core);
fprintf(fid,'#$ -V\n');
fprintf(fid,'#$ -cwd\n');
fprintf(fid,'#$ -j y\n');
fprintf(fid,'#$ -pe %dway %d\n',TaskPerNode,ceil(TaskNum/TaskPerNode)*12);
fprintf(fid,'#$ -M mzhou@utexas.edu\n');
fprintf(fid,'#$ -m be\n');
fprintf(fid,'#$ -q normal\n');
fprintf(fid,'#$ -o $JOB_NAME.$JOB_ID.out\n');
fprintf(fid,'#$ -l h_rt=%d:00:00\n',RunTime);
fprintf(fid,'#   <------ You MUST Specify a Project String ----->\n');
fprintf(fid,'#$ -A ParNBP\n');
fprintf(fid,'#------------------------------------------------------\n');
fprintf(fid,'#\n');
fprintf(fid,'# Usage:\n');
fprintf(fid,'#	#$ -pe <parallel environment> <number of slots>\n'); 
fprintf(fid,'#	#$ -l h_rt=hours:minutes:seconds to specify run time limit\n');
fprintf(fid,'# 	#$ -N <job name>\n');
fprintf(fid,'# 	#$ -q <queue name>\n');
fprintf(fid,'# 	#$ -o <job output file>\n');
fprintf(fid,'#	   NOTE: The env variable $JOB_ID contains the job id.\n'); 
fprintf(fid,'#\n');
fprintf(fid,'module load launcher\n');
fprintf(fid,'module load matlab\n');
fprintf(fid,'export EXECUTABLE=$TACC_LAUNCHER_DIR/init_launcher\n');
fprintf(fid,'export CONTROL_FILE=%s.q\n',core);
fprintf(fid,'export WORKDIR=.\n');
fprintf(fid,'#\n'); 
fprintf(fid,'# Variable description:\n');
fprintf(fid,'#\n');
fprintf(fid,'#  EXECUTABLE       = full path to the job launcher executable\n');
fprintf(fid,'#  CONTROL_FILE     = text input file which specifies\n');
fprintf(fid,'#                     executable for each process\n');
fprintf(fid,'#                     (should be located in WORKDIR)\n');
fprintf(fid,'#  PHI_CONTROL_FILE = text input file which specifies executable\n');
fprintf(fid,'#                     for each process to be run on Intel Xeon Phi\n');
fprintf(fid,'#                     (should be located in PHI_WORKDIR)\n');
fprintf(fid,'#  WORKDIR          = location of working directory\n');
fprintf(fid,'#  PHI_WORKDIR      = location of working directory for Intel Xeon Phi jobs\n');
fprintf(fid,'#  LAUNCHER_SCHED   = scheduling method for lines in CONTROL_FILE\n');
fprintf(fid,'#                     options (k=process, n=num. lines, p=num. procs):\n');
fprintf(fid,'#                       - interleaved (default):\n'); 
fprintf(fid,'#                           process k executes every k+nth line\n');
fprintf(fid,'#                       - block:\n');
fprintf(fid,'#                           process k executes lines [ k(n/p)+1 , (k+1)(n/p) ]\n');
fprintf(fid,'#                       - dynamic:\n');
fprintf(fid,'#                           process k executes first available unclaimed line\n');
fprintf(fid,'#      <------ End Setup Parameters ------>\n');
fprintf(fid,'#--------------------------------------------------------\n');
fprintf(fid,'#--------------------------------------------------------\n');
fprintf(fid,'#----------------\n');
fprintf(fid,'# Error Checking\n');
fprintf(fid,'#----------------\n');
fprintf(fid,'if [ ! -d $WORKDIR ]; then\n');
fprintf(fid,'        echo " "\n');
fprintf(fid,'	echo "Error: unable to change to working directory."\n');
fprintf(fid,'	echo "       $WORKDIR"\n');
fprintf(fid,'	echo " "\n');
fprintf(fid,'	echo "Job not submitted."\n');
fprintf(fid,'	exit\n');
fprintf(fid,'fi\n');
fprintf(fid,'if [ ! -x $EXECUTABLE ]; then\n');
fprintf(fid,'	echo " "\n');
fprintf(fid,'	echo "Error: unable to find launcher executable $EXECUTABLE."\n');
fprintf(fid,'	echo " "\n');
fprintf(fid,'	echo "Job not submitted."\n');
fprintf(fid,'	exit\n');
fprintf(fid,'fi\n');
fprintf(fid,'if [ ! -e $WORKDIR/$CONTROL_FILE ]; then\n');
fprintf(fid,'	echo " "\n');
fprintf(fid,'	echo "Error: unable to find input control file $CONTROL_FILE."\n');
fprintf(fid,'	echo " "\n');
fprintf(fid,'	echo "Job not submitted."\n');
fprintf(fid,'	exit\n');
fprintf(fid,'fi\n');
fprintf(fid,'#----------------\n');
fprintf(fid,'# Job Submission\n');
fprintf(fid,'#----------------\n');
fprintf(fid,'cd $WORKDIR/\n');
fprintf(fid,'echo " WORKING DIR:   $WORKDIR/"\n');
fprintf(fid,'$TACC_LAUNCHER_DIR/paramrun $EXECUTABLE $CONTROL_FILE\n');
fprintf(fid,'echo " "\n');
fprintf(fid,'echo " Parameteric Job Complete"\n');
fprintf(fid,'echo " "\n');
fclose(fid);